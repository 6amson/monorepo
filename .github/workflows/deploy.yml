name: Deploy to Amazon ECS and EKS

on:
  push:
    branches: ['main', 'master']

env:
  AWS_REGION: us-east-1 # Your AWS region
  ECR_REPOSITORY: monorepo # Your ECR repository name
  ECS_SERVICE: monorepo-service # Your ECS service name
  ECS_CLUSTER: thisEKS # Your ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Path to ECS task definition file
  CONTAINER_NAME: monorepo-container # Name of the container in the task definition
  EKS_CLUSTER: thisEkS # Your EKS cluster name
  K8S_DIRECTORY: k8s/  # Directory where Kubernetes manifests are stored

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Kubernetes (EKS) Deployment
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Deploy to Kubernetes (EKS)
        run: |
          kubectl apply -f ${{ env.K8S_DIRECTORY }}/deployment.yaml
          kubectl apply -f ${{ env.K8S_DIRECTORY }}/service.yaml

          # Check deployment status
          kubectl rollout status deployment/monorepo







# name: Deploy to Amazon ECS

# on:
#   push:
#     branches: ['main']

# env:
#   AWS_REGION: us-east-1 # Your AWS region
#   ECR_REPOSITORY: monorepo # Your ECR repository name
#   ECS_SERVICE: monorepo-service # Your ECS service name
#   ECS_CLUSTER: thisEKS # Your ECS cluster name
#   ECS_TASK_DEFINITION: .aws/task-definition.json # Path to ECS task definition file
#   CONTAINER_NAME: monorepo-container # Name of the container in the task definition

# permissions:
#   contents: read

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true



          
#           name: Deploy to EKS
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# env:
#   AWS_REGION: us-east-1
#   EKS_CLUSTER: thisEkS
#   ECR_REPOSITORY: monorepo
#   ECR_REGISTRY: 340752829568.dkr.ecr.us-east-1.amazonaws.com

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Update kube config
#         run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

#       # Now using the separate k8s files
#       - name: Deploy to Kubernetes
#         run: |
#           # Apply both files
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml

#           # Check deployment status
#           kubectl rollout status deployment/monorepo

